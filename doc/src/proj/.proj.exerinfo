
# Information about all exercises in the file proj.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.proj.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [{'aftertext': '\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Show that the unperturbed Hamiltonian $\\hat{H}_0$ and $\\hat{V}$\n  commute with both the spin projection $\\hat{S}_z$ and the total spin\n  $\\hat{S}^2$, given by\n!bt\n\\[\n  \\hat{S}_z := \\frac{1}{2}\\sum_{p\\sigma} \\sigma\n  a^{\\dagger}_{p\\sigma}a_{p\\sigma}\n\\]\n\n!et\nand\n!bt\n\\[\n  \\hat{S}^2 := \\hat{S}_z^2 + \\frac{1}{2}(\\hat{S}_+\\hat{S}_- +\n  \\hat{S}_-\\hat{S}_+),\n\\]\n\n!et\nwhere\n!bt\n\\[\n  \\hat{S}_\\pm := \\sum_{p} a^{\\dagger}_{p\\pm} a_{p\\mp}.\n\\]\n\n!et\nThis is an important feature of our system that allows us to\nblock-diagonalize the full Hamiltonian. We will focus on total spin\n$S=0$.  In this case, it is convenient to define the so-called pair\ncreation and pair annihilation operators\n!bt\n\\[\n\\hat{P}^{+}_p = a^{\\dagger}_{p+}a^{\\dagger}_{p-},\n\\]\n\n!et\nand\n!bt\n\\[\n\\hat{P}^{-}_p = a_{p-}a_{p+},\n\\] \n\n!et\nrespectively.\n\nShow that you can rewrite the Hamiltonian (with $\\xi=1$) as\n!bt\n\\[\n\\hat{H}=\\sum_{p\\sigma}(p-1)a_{p\\sigma}^{\\dagger}a_{p\\sigma}\n-\\frac{1}{2}g\\sum_{pq}\\hat{P}^{+}_p\\hat{P}^{-}_q.\n\\]\n\n!et\nShow also that Hamiltonian commutes with the product of the pair\ncreation and annihilation operators.  This model corresponds to a\nsystem with no broken pairs. This means that the Hamiltonian can only\nlink two-particle states in so-called spin-reversed states.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': 'We give first the final Hamiltonian matrix\n!bt\n\\[\nH = \\left ( \n\\begin{array}{cccccc}\n2\\delta -g & -g/2 & -g/2 & -g/2 & -g/2 & 0 \\\\\n -g/2 & 4\\delta -g & -g/2 & -g/2 & -0 & -g/2 \\\\\n-g/2 & -g/2 & 6\\delta -g & 0 & -g/2 & -g/2 \\\\\n -g/2 & -g/2 & 0 & 6\\delta-g & -g/2 & -g/2 \\\\\n -g/2 & 0 & -g/2 & -g/2 & 8\\delta-g & -g/2 \\\\\n0 & -g/2 & -g/2 & -g/2 & -g/2 & 10\\delta -g \n\\end{array} \\right )\n\\]\n\n!et\nThe following python program diagonalizes the above Hamiltonian matrix for a given span of interaction strength values, performing both a full configuration interaction calculation and a truncated one. For the truncated case we leave out the $4p4h$ state. This means that in addition to the ground state we include the four possible $2p2h$ states. Such a calculation is normally called a configuration interaction calculation. \n!bc pyscpro\nfrom numpy import *\nfrom sympy import *\nfrom matplotlib.pyplot import *\n\ng_array = linspace(-1, 1, 1001)\ne1_array = []\ne2_array = []\n\nfor g in g_array:\n\tH1 = matrix([[2-g , -g/2.,  -g/2., -g/2., -g/2.,     0], \n\t\t        [-g/2.,   4-g,  -g/2., -g/2.,    0., -g/2.],\n\t\t        [-g/2., -g/2.,    6-g,     0, -g/2., -g/2.],\n\t\t\t\t[-g/2., -g/2.,      0,   6-g, -g/2., -g/2.],\n\t\t\t\t[-g/2.,     0,  -g/2., -g/2.,   8-g, -g/2.],\n\t\t\t\t[0    , -g/2.,  -g/2., -g/2., -g/2.,  10-g]]) \n\n\tH2 = matrix([[2-g , -g/2.,  -g/2., -g/2., -g/2.], \n\t\t        [-g/2.,   4-g,  -g/2., -g/2.,    0.],\n\t\t        [-g/2., -g/2.,    6-g,     0, -g/2.],\n\t\t\t\t[-g/2., -g/2.,      0,   6-g, -g/2.],\n\t\t\t\t[-g/2.,     0,  -g/2., -g/2.,   8-g]]) \n\n\t\t\n\n\tu1, v1 = linalg.eig(H1)\n\tu2, v2 = linalg.eig(H2)\n\n\tif g == 1./2:\n\t\tprint argmin(u1)\n\n\t\tfor i in range(5):\n\t\t\tprint " %.3f " % v2[i,0],\n\n\n\n\te1_array.append(min(u1))\n\te2_array.append(min(u2))\n\n\nplot(g_array, e1_array, linewidth=2.0)\n#plot(g_array, e2_array, linewidth=2.0)\nplot(g_array, (2-g_array), linewidth=2.0)\ngrid()\nxlabel(r"Strength of interaction, $g$", fontsize=16)\nylabel(r\'Ground state energy\', fontsize=16)\n#axis([-1,1,-0.4,0.05])\nlegend([\'FCI -- Exact\', \'Reference energy\'])\nsavefig("pairing.pdf")\nshow()\n\n!ec\nThe eigenvalues and eigenvectors result from the diagonalization of the above Hamiltonian matrix.\nIn the discussions below and in connection with the first stage of the numerical project, we will use these results to benchmark various approximative methods. \nThe lowest eigenvalue corresponds to the ground state\nenergy and we will refer to it as the *exact energy* when no truncations in the space of possible Slater determinants are made..\n\nFrom our results, we note some important differences between the full configuration interaction (FCI)\ncalculation and the truncated configuration interaction calculation (CI).\nFull configuration interaction is an exact method, but is only\npossible if and only if we have a complete and finite SD basis for our\nsystem. In practice, we usually don\'t have this. Non-complete\nCI however, is always possible, but yiels   approximative\nresults only. The method is however still variational however, meaning that we \nguaranteed that the approximation will be equal or bigger to the true\nresult. \nPerturbation theory however, is non-variational and there is no guarantee that including higher orders in the \nperturbation gives an improved result, as we will see below.\n\nIn an FCI case, we are including all possible exictations to infinite\norder, meaning we have all possible $1p1h$ , $2p2h$ etc configurations, up to $4p4h$ \nexcitations for our selected model. Due to the nature of the pairing interaction and our selection\nof specific quantum numbers for the many-body states, we do not have any $1p1h$ or $3p3h$ excitations.\nIn the above CI case, we truncate those excitations somewhere. \nIf we\nwere to draw the diagrams of the interactions that contribute to this\nCI case, there would be an infinite number of them, as we can have\narbitrarily long chains of operators that still only have at most 2p2h\nintermediate states.',
             'text': 'Construct thereafter the Hamiltonian matrix for a system with no\n  broken pairs and total spin $S=0$ for the case of the four lowest\n  single-particle levels indicated in the\n  Fig.~ref{fig:schematic}. Our system consists of four particles\n  only.  Our single-particle space consists of only the four lowest\n  levels $p=1,2,3,4$.  You need to set up all possible Slater\n  determinants.  Find all eigenvalues by diagonalizing the Hamiltonian\n  matrix.  Vary your results for values of $g\\in [-1,1]$.  We refer to\n  this as the exact calculation. Comment the behavior of the ground\n  state as function of $g$.'},
            {'aftertext': '\n\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'We switch now to approximative methods, in our case Hartree-Fock\n  theory and many-body perturbation theory. Hereafter we will define\n  our model space to consist of the single-particle levels $p=1,2$.\n  The remaining levels $p=3,4$ define our excluded space.  This means\n  that our ground state Slater determinant consists of four particles\n  which can be placed in the doubly degenerate orbits $p=1$ and $p=2$.\n  Our first step is to perform a Hartree-Fock calculation with the\n  pairing Hamiltonian.  Write first the normal-ordered Hamiltonian\n  with respect to the above reference state given by four spin $1/2$\n  fermions in the single-particle levels $p=1,2$. Define what is meant\n  by a canonical Hartree-Fock case, a non-canonical case and a general\n  case.  For all three cases, write down the normal-ordered\n  Hamiltonian and draw the diagrammatic form of the Hamiltonian for all three cases.'},
            {'aftertext': '\n\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'We will now set up the Hartree-Fock equations by varying the\ncoefficients of the single-particle functions. The single-particle\nbasis functions are defined as\n!bt\n\\[\n\\psi_p = \\sum_{\\lambda} C_{p\\lambda}\\psi_{\\lambda}.\n\\]\n\n!et\nwhere in our case $p=1,2,3,4$ and $\\lambda=1,2,3,4$, that is the first\nfour lowest single-particle orbits of Fig.~ref{fig:schematic}.  Set\nup the Hartree-Fock equations for this system by varying the\ncoefficients $C_{p\\lambda}$ and solve them for values of $g\\in\n[-1,1]$.  Comment your results and compare with the exact\nsolution. Discuss also which diagrams in Fig.~ref{fig:diagrams} that\ncan be affected by a Hartree-Fock basis. Compute the total binding\nenergy using a Hartree-Fock basis and comment your results.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'We will now study the system using non-degenerate\nRayleigh-Schroedinger perturbation theory to third order in the\ninteraction.  If we exclude the first order contribution, all possible\ndiagrams (so-called anti-symmetric Goldstone diagrams) are\nshown in Fig.~ref{fig:diagrams}.\n\nFIGURE: [fig-proj/diagrams.pdf, width=500 frac=0.6] Diagrams to third order in the interaction, including also non-canonical Hartree-Fock diagrams. The first order term is excluded. All interaction vertices represent anti-symmetrized matrix elements. label{fig:diagrams}\n\nBased on the form of the interaction, which diagrams contribute to the\nbinding energy of the ground state?  Write down the expressions for\nthe diagrams that contribute and find the contribution to the ground\nstate energy as function $g\\in [-1,1]$. Comment your results.  Compare\nthese results with those you obtained from the exact diagonalization with and without the $4p-4h$ state.\nDiscuss your results for a canonical Hartree-Fock basis and a non-canonical Hartree-Fock basis.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Diagram 1 in Fig.~ref{fig:diagrams} represents a second-order contribution to the energy and a so-called $2p-2h$ contribution to the intermediate states. Write down the expression for the wave operator in this case and compare the possible contributions with the configuration interaction calculations without the $4p-4h$ Slater determinant. Comment your results for \nvarious values of $g\\in [-1,1]$.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': 'To fourth order in the interaction there are several diagrams to consider. \nFortunately, due to the character of the pairing Hamiltonian, several of these contributions are\nzero. We limit our discussions also to include the \ncanonical HF-case only. \nAll of the diagrams in the canonical case are\nshown in figures 3, 4, 5 and 6 above. \nUsing also the linked diagram theorem, where a\ndiagram is called unlinked if and only if it has a disconnected part\nthat is closed, we can eliminate some further  diagrams. Goldstones\nlinked-diagram theorem states that all unliked diagrams will cancel\nagainst the renormalization terms in Rayleigh-Schroedinger perturbation theory, \nmeaning that we can define\nthe energy to each order as a sum of linked diagrams\nonly. We can then disregard diagram 33 and 41.\n\nLet us now go through all the diagrams and find those that vanish due\nto having broken pairs, i.e., the diagrams that vanish due to our\nspecific interaction. Take for example diagram 1, which vanishes due\nto having a term $\\langle ab\\vert \\hat{v} \\vert ci\\rangle$. From this\nargument, we see that all four diagrams from figure 3 vanish. Similar\narguments shows that most diagrams in figure 4 also dissapear. Going\nthrough all the diagrams, we see that 5, 6, 14 and 15 are the ones\nthat do not vanish in figure 4. For figure 5 we actually see that all\ndiagrams vanish again. For figure 6 we already found that 33 and 41\nvanished due to being unlinked---the rest contribute to the perturbative expansion of the \nenergy.\nThe diagrams of figures 3 and 5 vanish since they involve $1p1h$ and $3p3h$ excitations, respectively.\n\nThe expressions for these diagrams can easily be written in terms of a\nsimple Python program. Note however that for every diagram we do\nactually perform loops over every single-particle state. As we will\nsee later, this is extremely inefficient from a computational point\nof view. In our discussions of the projects below, we will rewrite the\ncomputations of most diagrams in terms of efficient matrix-matrix\nmultiplications or matrix-vector multiplications.  The following\nPython program gives us the final results for perturbation theory to fourth\norder in the interaction. The resulting figures include also plots of the relative error in the\ncorrelation energy. That is, we compare the computed correlation in\nperturbation theory with the result from the exact diagonalization discussed above.\n\n!bc pyscpro\nfrom sympy import *\nfrom pylab import *\n\nbelow_fermi = (0,1,2,3)\nabove_fermi = (4,5,6,7)\n\nstates = [(1,1),(1,-1),(2,1),(2,-1),(3,1),(3,-1),(4,1),(4,-1)]\nN = 8\ng = Symbol(\'g\')\n\n\n\ndef h0(p,q):\n\tif p == q:\n\t\tp1, s1 = states[p]\n\t\treturn (p1 - 1)\t\n\telse:\n\t\treturn 0\n\ndef f(p,q):\n\tif p == q:\n\t\treturn 0\n\n\ts = h0(p,q)\n\tfor i in below_fermi:\n\t\ts += assym(p,i,q,i)\n\treturn s\n\n\ndef assym(p,q,r,s):\n\tp1, s1 = states[p]\n\tp2, s2 = states[q]\n\tp3, s3 = states[r]\n\tp4, s4 = states[s]\n\n\tif p1 != p2 or p3 != p4:\n\t\treturn 0\n\tif s1 == s2 or s3 == s4:\n\t\treturn 0\n\tif s1 == s3 and s2 == s4:\n\t\treturn -g/2.\n\tif s1 == s4 and s2 == s3:\n\t\treturn g/2.\n\ndef eps(holes, particles):\n\tE = 0\n\tfor h in holes:\n\t\tp, s = states[h]\n\t\tE += (p-1)\n\tfor p in particles:\n\t\tp, s = states[p]\n\t\tE -= (p-1)\n\treturn E\n\n\n# Diagram 3\n# s = 0 \n# for a in above_fermi:\n# \tfor b in above_fermi:\n# \t\tfor c in above_fermi:\n# \t\t\tfor i in below_fermi:\n# \t\t\t\tfor j in below_fermi:\n# \t\t\t\t\tfor k in below_fermi:\n# \t\t\t\t\t\ts += assym(i,j,a,b)*assym(a,c,j,k)*assym(b,k,c,i)/eps((i,j),(a,b))/eps((k,j),(a,c))\n# print s\n\n\n# ga = linspace(-1,1,101)\n# corr2 = []\n# corr3 = []\n# corrx = []\n\n\n# Diagram 1\ns1 = 0\nfor a in above_fermi:\n\tfor b in above_fermi:\n\t\tfor i in below_fermi:\n\t\t\tfor j in below_fermi:\n\t\t\t\ts1 += 0.25*assym(a,b,i,j)*assym(i,j,a,b)/eps((i,j),(a,b))\n\n# Diagram 4\ns4 = 0\nfor a in above_fermi:\n\tfor b in above_fermi:\n\t\tfor c in above_fermi:\n\t\t\tfor d in above_fermi:\n\t\t\t\tfor i in below_fermi:\n\t\t\t\t\tfor j in below_fermi:\n\t\t\t\t\t\ts4 += 0.125*assym(i,j,a,b)*assym(a,b,c,d)*assym(c,d,i,j)/eps((i,j),(a,b))/eps((i,j),(c,d))\n\n# Diagram 5\ns5 = 0\nfor a in above_fermi:\n\tfor b in above_fermi:\n\t\tfor i in below_fermi:\n\t\t\tfor j in below_fermi:\n\t\t\t\tfor k in below_fermi:\n\t\t\t\t\tfor l in below_fermi:\n\t\t\t\t\t\ts5 += 0.125*assym(i,j,a,b)*assym(k,l,i,j)*assym(a,b,k,l)/eps((i,j),(a,b))/eps((k,l),(a,b))\n\n# Diagram 8 (simplified)\ns8 = 0 \nfor a in above_fermi:\n\tfor b in above_fermi:\n\t\tfor i in below_fermi:\n\t\t\tfor j in below_fermi:\n\t\t\t\tfor k in below_fermi:\n\t\t\t\t\ts8 -= 0.5*assym(i,j,a,b)*assym(a,b,i,k)*f(k,j)/eps((i,j),(a,b))/eps((i,k),(a,b))\n\n# Diagram 9 (simplified)\ns9 = 0 \nfor a in above_fermi:\n\tfor b in above_fermi:\n\t\tfor c in above_fermi:\n\t\t\tfor i in below_fermi:\n\t\t\t\tfor j in below_fermi:\n\t\t\t\t\ts9 += 0.5*assym(i,j,a,b)*assym(a,c,i,j)*f(b,c)/eps((i,j),(a,b))/eps((i,j),(a,c))\n\n\nprint s1\nprint s4\nprint s5\nprint s8\nprint s9\n\ns_5 =  -0.0291521990740741*g**4\ns14 =  -0.0308883101851853*g**4\ns34 =  0.0163049768518519*g**4\ns36 =  -0.0145760995370371*g**4\ns38 =  -0.0201099537037037*g**4\ns39 =  0.0176938657407407*g**4\n\nga = linspace(-1,1,10001)\ne1 = []\ncorr2 = []\ncorr3 = []\ncorr4 = []\nfor g_val in ga:\n\tH1 = matrix([[2-g_val , -g_val/2.,  -g_val/2., -g_val/2., -g_val/2.,     0], \n\t\t        [-g_val/2.,   4-g_val,  -g_val/2., -g_val/2.,    0., -g_val/2.],\n\t\t        [-g_val/2., -g_val/2.,    6-g_val,     0, -g_val/2., -g_val/2.],\n\t\t\t\t[-g_val/2., -g_val/2.,      0,   6-g_val, -g_val/2., -g_val/2.],\n\t\t\t\t[-g_val/2.,     0,  -g_val/2., -g_val/2.,   8-g_val, -g_val/2.],\n\t\t\t\t[0    , -g_val/2.,  -g_val/2., -g_val/2., -g_val/2.,  10-g_val]]) \n\n\tu1, v1 = linalg.eig(H1)\n\te1.append(min(u1))\n\n\tcorr2.append((s1).subs(g,g_val))\n\tcorr3.append((s1+s4+s5).subs(g,g_val))\n\tcorr4.append((s1+s4+s5+2*s_5+2*s14+2*s34+2*s36+s38+2*s39).subs(g,g_val))\n\nexact = e1 - (2-ga)\n\nplot(ga, exact, linewidth=2.0)\nplot(ga, corr2, linewidth=2.0)\nplot(ga, corr3, linewidth=2.0)\nplot(ga, corr4, linewidth=2.0)\nxlabel(r\'Interaction strength, $g$\', fontsize=16)\nylabel(r\'Correlation energy\', fontsize=16)\naxis([-1,1,-0.5,0.05])\ngrid()\nlegend(["Exact", "2. order MPBT", "3. order MPBT", "4. order MPBT"], \'lower left\')\nsavefig("perturbationtheory.pdf")\nshow()\nerror1 = zeros(len(exact))\nerror2 = zeros(len(exact))\nerror3 = zeros(len(exact))\n\nfor i in range(len(exact)):\n\terror1[i] = abs(float(exact[i]-corr2[i]))\n\terror2[i] = abs(float(exact[i]-corr3[i]))\n\terror3[i] = abs(float(exact[i]-corr4[i]))\n\nerror1 = array(error1)\nerror2 = array(error2)\nerror3 = array(error3)\nprint type(error1)\n\nplot(ga, log10(error1))\nplot(ga, log10(error2))\nplot(ga, log10(error3))\nxlabel(r"Strength of interaction, $g$", fontsize=16)\nylabel(r"Error, $\\log_{\\rm 10}({\\rm abs}({\\rm error})$", fontsize=16)\nlegend(["2. order MPBT", "3. order MPBT", "4. order MPBT"], \'lower left\')\ngrid()\nsavefig("logerror.pdf")\nshow()\n\n!ec\nRunning the Python program shows us that\nthe approximation to both second and third order are very\ngood when the interaction strength is small and contained in the interval  \n$g\\in[-0.5,0.5]$, but as the\ninteraction gets stronger the approximation worsens. We also\nnote that the third-order result is actually worse than the second order result \nfor larger values of the interaction strength, indicating that there is no guarantee that higher orders\nin many-body perturbation theory may reduce the relative error in a systematic way.\nThis is seen in particular for the results to fourth order. For negative interaction strengths \nfourth order gives a better result than second and third order, while for $g>0$ the relative error is \nworse.\nWe note also the non-variational character of many-body perturbation theory, with results at different undershooting the true ground state correlation energy.',
             'text': "We limit now the discussion to the canonical Hartree-Fock case only. To fourth order in perturbation theory we can produce diagrams with $1p-1h$ intermediate excitations as shown in Fig.~ref{fig:fourthorder1p1h}, $2p-2h$ excitations, see Fig.~ref{fig:fourthorder2p2h}, $3p-3h$ excitations as shown in Fig.~ref{fig:fourthorder3p3h} and finally so-called diagrams with intermediate four-particle-four-hole excitations, see Fig.~ref{fig:fourthorder4p4h}. \n\nFIGURE: [fig-proj/fourthorder1p1h.png, width=500 frac=0.6] One-particle-one-hole excitations to fourth order. label{fig:fourthorder1p1h}\n\nFIGURE: [fig-proj/fourthorder2p2h.png, width=500 frac=0.6] Two-particle-two-hole excitations to fourth order. label{fig:fourthorder2p2h}\n\nFIGURE: [fig-proj/fourthorder3p3h.png, width=500 frac=0.6] Three-particle-three-hole excitations to fourth order. label{fig:fourthorder3p3h}\n\nFIGURE: [fig-proj/fourthorder4p4h.png, width=500 frac=0.6] Four-particle-four-hole excitations to fourth order. label{fig:fourthorder4p4h}\n\nDefine first linked and unlinked diagrams and explain briefly Goldstone's linked diagram theorem.\nBased on the linked diagram theorem and the form of the pairing Hamiltonian, which diagrams will contribute\nto fourth order? \n\nCalculate the energy to fourth order with a canonical Hartree-Fock basis for $g\\in [-1,1]$ and compare\nwith the full diagonalization case in exercise b). Discuss the results."}],
  'text': '',
  'title': 'Pairing Hamiltonian',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 2,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Explain why no single excitations are involved in this model.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Set up the coupled cluster equations for doubles excitations and convince yourself about their\nmeaning and correctness.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Write a class which holds\nsingle-particle data like specific quantum numbers, single-particle\nHamiltonian etc. Write also a class which sets up and stores two-body\nmatrix elements defined by the single-particle states.  Write\nthereafter functions/classes which implement the coupled cluster\nmethod with doubles only.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Compare your results with\nthose from the exact diagonalization with and without the $4p4h$\nexcitation. Compare also your results to perturbation theory at\ndifferent orders, in particular to second order. Discuss your results.\nIf other students are solving the same problem using Green's function\ntheory, you can also compare your results with those obtained from\nGreen's function theory. The aim is to finalize this part during the\nfirst week. The codes you will develop can be used as a starting point\nfor the second part of the project."}],
  'text': 'This project serves as a continuation\nof the pairing model with the aim being to solve the same problem but\nnow by developing a program that implements the coupled cluster method\nwith double excitations only. In doing so you will find it convenient\nto write classes which define the single-particle basis and the\nHamiltonian. Your functions that solve the coupled cluster equations\nwill then just need to set up variables which point to interaction\nelements and single-particle states with their pertinent quantum\nnumbers. Use for example the setup discussed in the FCI lectures for\nthe pairing model.',
  'title': 'Coupled cluster calculations with doubles excitations only for the pairing model',
  'type': 'Project',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 3,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Write the diagrams for the self-energy at first and second order, using the Lehman representation for the latter and HF reference state. Write the first order diagrams also in terms of a fully dressed propagator.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Set up the Dyson-ADC(2) equations and convince yourself about their meaning and correctness.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Write a class that holds the one-body propagator in Lehman representation. In this, the Dyson orbits (or overlap functions) are expanded in terms of the basis exactly as for the HF equations above. However, you will need to handle\na much larger number of orbits and their respective energies. You will also need to store particle and hole orbits separately. \n Using the results of your HF calculations above, build a simple HF propagator. This will be your reference state.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Write a class which holds single-particle data like specific quantum numbers, single-particle Hamiltonian etc. Write also a class which sets up and stores two-body matrix elements defined by the single-particle states.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Use the above classes to solve the ADC(2) euqatoions in the following three steps:\n * write the ADC(2) Dyson matrix\n * diagonalise it (with a Lapack or an eigensolver of your choice)\n *normalize the eigenvalues, separate them in hole and particle states, and store them in a new propagator object.'},
            {'aftertext': '\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Now you can use your ADC(2) code to have some fun:\n  o Plot the spectral functions for the HF (reference) propagator and the final (dressed) result. Compare them. This is the most fun part\xe2\x80\xa6  otherwise why should you write a SCGF code for?\n s o Use your solution (the dressed propagator) to recalculate the first order diagram and and implement a partial \n     self-consistency loop. See what changes.\n  o Use the Koltun sum rule to calculate the binding energy and compare your results with those from the exact diagonalization with and without the 4p4h excitation. Compare also your results to perturbation theory at different orders, in particular to second order. Discuss your results. If other students are solving the same problem using CCD theory, you can also compare your results with theirs.\n  o How do your results change my increasing the coupling 'g'? When is ADC(2)  breaking down for this particular model?\n\n\n The aim is to finalize this part, up to point e), during the first week. The codes you will develop can be used as a starting point for the second part of the project. In the second part we will focus on infinite matter."}],
  'text': "This project serves as a continuation of the pairing model with the aim being to solve the same problem but now by developing a program that implements the self-consistent Green's function method with a second order self energy. This is what is called the ADC(2) approximation scheme. In doing so you will find it convenient to write classes which define the single-particle basis and the Hamiltonian. One more, important, class will be needed to store the one-body propagator. Your functions that solve the ADC(3) will then just need to set up variables which point to interaction elements, single-particle states and Dyson states with their pertinent quantum numbers. Use for example the setup discussed in the FCI lectures for the pairing model.",
  'title': "Green's function calculations with a second order self-energy for the pairing model",
  'type': 'Project',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 4,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Explain why we don't have single excitations in infinite matter."},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Set up the relavent quantum numbers for a cartesian basis with plane waves in three dimensions. Make the according changes to the code you developed in connection with the pairing model. Implement periodic boundary conditions.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Replace the two-body interaction from the pairing model with the Minnesota potential model discussed during the "lectures":"https://github.com/NuclearTalent/Course2ManyBodyMethods/blob/master/doc/pub/cc/pdf/Lectures1-2_TALENT_NuclearMatter_GH.pdf".'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Use the program you developed in connection with the pairing model to perform coupled cluster calculations in infinite matter with doubles excitations.\nPerform coupled cluster calculations for infinite nuclear matter with the Minnesota interaction for different particle numbers (to be inserted later).\nLimit yourself to two-particle and two-hole intermediate excitations only.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Compare the two-particle only excitations with a finite number of particles with results obtained with Brueckner-Hartree-Fock calculations in the thermodynamic limit. Comment your results'},
            {'aftertext': '\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'The final challenge is to include particle-hole excitations and\ncompare the results with those from Diffusion Monte Carlo calculations\ndiscussed during the "lectures":"https://github.com/NuclearTalent/Course2ManyBodyMethods/blob/master/doc/pub/cc/pdf/Lectures1-2_TALENT_NuclearMatter_GH.pdf".\nThis part can be included in the final project.'}],
  'text': 'This project forms one possible final path for the remaining two weeks. It can also be extended in order to define the final project.  You should be able to use the program you developed in connection with the \nsolution of the pairing model.',
  'title': 'Coupled cluster calculations with doubles excitations only for infinite nuclear matter',
  'type': 'Project',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 5,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Explain why we don't have single excitations in infinite matter."},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Set up the relavent quantum numbers for your problem:\n  o For FN:  use and harmonic oscillator basis in m-scheme\n  o for INM: use a cartesian basis with plane waves in three dimensions and implement periodic boundary conditions.\n\nIn both cases, make the according changes to the code you developed in connection with the pairing model.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Replace the two-body interaction from the pairing model with the Minnesota potential model discussed during the lectures (functions for matrix elements in harmonic oscillator basis will be provided).'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Use the program you developed in connection with the pairing model to perform SCGF calculations at second order. Perform calculations with the Minnesota interaction as follows:\n\n  o for finite nuclei chose closed shell systems (He4, C12, O16)  \n  ofor infinite nuclear matter chose different particle numbers (to be inserted later). \n\nAt this point, limit yourself to the ADC(2) scheme only.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Add the two-particle interactions to the 2p1h sector of the Dyson-ADC(2) matrix and suppress the 2h1p sector: this\nshould lead you to an approximation equivalent to the Brueckner-Hartree-Fock scheme. Compare your results obtained with\nthose obetain in CCD with only twp-particle intermediate excitations. If you are doing infinite matter, compare to the  Brueckner-Hartree-Fock calculations in the thermodynamic limit (from project 6). Comment your results.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "The final challenge is to keep both the 2p1h and the 2h1p sectors and fill the ADC(n) matrix with all the two-particle, the two-hole, and the particle-hole interactions.  This last change results in the so called 'Extended ADC(2)' approximation scheme. Investigate the effects that pp, hh and ph correlations. \nThis part can be included in the final project. And if you already got all the way to point e), this last part should be a relatively easy improvement to make!"},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Are you felling particularly ambitious? One can further modify the code by adding the missing 3rd order terms to the couplings between the single particle sector and the 2p1h/2h1p sectors. This will give you a full blown ADC(3) calculation. Study the effects of this last change on the energy of the main quasiparticle peaks\xe2\x80\xa6  chemist need this to obtain correct ionization potentials and affinities.'}],
  'text': 'The hard work in learning how to deal with SCGF was done in Project 2. Now, we make it fancy and extend it to some more real systems rather than a simple pairing model. This can be done very similarly either for finite nuclei or for infinite nuclear matter. However, you should choose only one this two paths and focus only on that: it is already a lot of work doing one. We will do this at the ADC(2) level and toward the end of the project we will consider an extended version of it to make useful comparison with the Brueckner-HF and CCD calculations done by others.\n\nEither of the two path of this project forms one possible final path for the remaining two weeks. It can also be extended in order to define the final project. You should be able to use the program you developed in connection with the solution of the pairing model.',
  'title': "Green's function calculations for finite nuclei and infinite nuclear matter",
  'type': 'Project',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 6,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': "For scattering states, the energy is positive, $E>0$. \nThe Lippman-Schwinger equation (a rewrite of the Schroedinger equation)\nis an integral equation\nwhere we have to deal with the amplitude \n$R(k,k')$ (reaction matrix, which is the real part of  the full\ncomplex $T$-matrix)\ndefined through the integral equation for one partial wave (no coupled-channels) \n!bt\n\\begin{equation}\n    R_l(k,k') = V_l(k,k') +\\frac{2}{\\pi}{\\cal P}\n                \\int_0^{\\infty}dqq^2V_l(k,q)\\frac{1}{E-q^2/m}R_l(q,k').\n   label{eq:ls1}\n\\end{equation}\n\n!et\nFor negative energies (bound states) and intermediate states scattering states blocked\nby  occupied states below the Fermi level.\n\nThe symbol ${\\cal P}$ indicates that Cauchy's principal-value prescription\nis used in order to avoid the singularity arising from the zero of the denominator.\n\n\nThe total kinetic energy of the two \nincoming particles in the center-of-mass system\nis \n!bt\n\\[\n    E=\\frac{k_0^2}{m_n}.\n\\]\n\n!et\n\nThe matrix $R_l(k,k')$ relates to the \nthe  phase shifts through its diagonal elements as\n!bt\n\\begin{equation}\n     R_l(k_0,k_0)=-\\frac{tan\\delta_l}{mk_0}.\n     label{eq:shifts}\n\\end{equation}\n\n!et\nIn order to solve the Lippman-Schwinger equation \nin momentum space, we need first to write \na function which sets up the mesh points. \nWe need to do that since we are going to approximate an integral\nthrough \n!bt\n\\[\n   \\int_a^bf(x)dx\\approx\\sum_{i=1}^Nw_if(x_i),\n\\]\n\n!et\nwhere we have fixed $N$ lattice points through the corresponding weights\n$w_i$ and points $x_i$. Typically obtained via methods like Gaussian quadrature.\n\nIf you use Gauss-Legendre the points are determined for the interval $x_i\\in [-1,1]$\nYou map these points over to the limits in your integral. You can then\nuse the following mapping\n!bt\n\\[\n  k_i=const\\times tan\\left\\{\\frac{\\pi}{4}(1+x_i)\\right\\},\n\\]\n\n!et\nand \n!bt\n\\[\n   \\omega_i= const\\frac{\\pi}{4}\\frac{w_i}{cos^2\\left(\\frac{\\pi}{4}(1+x_i)\\right)}.\n\\]\n\n!et\nIf you choose units fm$^{-1}$ for $k$, set $const=1$. If you choose to work\nwith MeV, set $const\\sim 200$ ($\\hbar c=197$ MeVfm).\n\nThe principal value integral is rather tricky\nto evaluate numerically, mainly since computers have limited\nprecision. We will here use a subtraction trick often used\nwhen dealing with singular integrals in numerical calculations.\nWe introduce first the calculus relation\n!bt\n\\[\n  \\int_{-\\infty}^{\\infty} \\frac{dk}{k-k_0} =0.\n\\]\n\n!et\nIt means that the curve $1/(k-k_0)$ has equal and opposite\nareas on both sides of the singular point $k_0$. If we break\nthe integral into one over positive $k$ and one over \nnegative $k$, a change of variable $k\\rightarrow -k$ \nallows us to rewrite the last equation as\n!bt\n\\[\n  \\int_{0}^{\\infty} \\frac{dk}{k^2-k_0^2} =0.\n\\]\n\n!et\n\nWe can then express a principal values integral\nas\n!bt\n\\begin{equation}\n  {\\cal P}\\int_{0}^{\\infty} \\frac{f(k)dk}{k^2-k_0^2} =\n  \\int_{0}^{\\infty} \\frac{(f(k)-f(k_0))dk}{k^2-k_0^2},\n   label{eq:trick}\n\\end{equation}\n\n!et\nwhere the right-hand side is no longer singular at \n$k=k_0$, it is proportional to the derivative $df/dk$,\nand can be evaluated numerically as any other integral.\n\n\nWe can then use this trick to obtain\n!bt\n\\begin{equation}\n    R(k,k') = V(k,k') +\\frac{2}{\\pi}\n                \\int_0^{\\infty}dq\n                \\frac{q^2V(k,q)R(q,k')-k_0^2V(k,k_0)R(k_0,k')  }\n                     {(k_0^2-q^2)/m}.\n   label{eq:ls2}\n\\end{equation}\n\n!et\nThis is the equation to solve numerically in order\nto calculate the phase shifts. We are interested in obtaining\n$R(k_0,k_0)$.\n\nHow do we proceed?\n\nUsing the mesh points $k_j$ and the weights $\\omega_j$, we reach\n!bt\n\\[\n          R(k,k') = V(k,k') +\\frac{2}{\\pi}\n          \\sum_{j=1}^N\\frac{\\omega_jk_j^2V(k,k_j)R(k_j,k')}\n                           {(k_0^2-k_j^2)/m}\n           -\\frac{2}{\\pi}k_0^2V(k,k_0)R(k_0,k')\n          \\sum_{n=1}^N\\frac{\\omega_n}\n                           {(k_0^2-k_n^2)/m}.                \n\\]\n\n!et\nThis equation contains now the unknowns $R(k_i,k_j)$\n(with dimension $N\\times N$) and $R(k_0,k_0)$.\n\nWe can turn it into an equation\nwith dimension $(N+1)\\times (N+1)$ with  a mesh\nwhich contains the original mesh points $k_j$ for $j=1,N$\nand the point which corresponds to the energy $k_0$.\nConsider the latter as the 'observable' point.\nThe mesh points become then $k_j$ for $j=1,n$ and\n$k_{N+1}=k_0$. \n\nWith these new mesh points we define the matrix\n!bt\n\\begin{equation}\n      A_{i,j}=\\delta_{i,j}-V(k_i,k_j)u_j,\n      label{eq:aeq}\n\\end{equation}\n\n!et\nwhere $\\delta$ is the Kronecker $\\delta$\nand\n!bt\n\\[\n     u_j=\\frac{2}{\\pi}\\frac{\\omega_jk_j^2}{(k_0^2-k_j^2)/m}\\hspace{1cm} j=1,N\n\\]\n\n!et\nand\n!bt\n\\[\n     u_{N+1}=-\\frac{2}{\\pi}\\sum_{j=1}^N\\frac{k_0^2\\omega_j}{(k_0^2-k_j^2)/m}.\n\\]\n\n!et\nThe first task is then to \nset up the matrix $A$ for a given $k_0$. This is an\n$(N+1)\\times (N+1)$ matrix. It can be convenient\nto have an outer loop which runs over the chosen\nobservable values for the energy $k_0^2/m$.\n*Note that all mesh points $k_j$ for $j=1,N$ must be different from $k_0$. Note also that $V(k_i,k_j)$ is an $(N+1)\\times (N+1)$ matrix*. \n\nWith the matrix $A$ we can rewrite the problem as a matrix problem of dimension $(N+1)\\times (N+1)$.\nAll matrices $R$, $A$ and $V$ have this dimension and we get\n!bt\n\\[\n    A_{i,l}R_{l,j}=V_{i,j},\n\\] \n\n!et\nor just\n!bt\n\\[\n    AR=V.\n\\] \n\n!et\n\nSince you already have defined $A$ and $V$\n(these are stored as $(N+1)\\times (N+1)$ matrices) \nThe final equation involves only the unknown\n$R$. We obtain it by matrix inversion, i.e.,\n!bt\n\\begin{equation}\n    R=A^{-1}V.\n    label{eq:final2}\n\\end{equation}\n\n!et\nThus, to obtain $R$, you will need to set up the matrices\n$A$ and $V$ and invert the matrix $A$. \nWith the inverse $A^{-1}$, perform\na matrix multiplication with $V$ results in $R$.\n\nWith $R$ you can then evaluate the phase shifts\nby noting that \n!bt\n\\[\n      R(k_{N+1},k_{N+1})=R(k_0,k_0)=-\\frac{tan\\delta}{mk_0},\n\\]\n\n!et\nwhere $\\delta$ are the phase shifts.",
             'text': 'We will use  the simple Minnesota model discussed during the "lectures":"https://github.com/NuclearTalent/Course2ManyBodyMethods/blob/master/doc/pub/cc/pdf/Lectures1-2_TALENT_NuclearMatter_GH.pdf". This will allow us to make detailed comparisons  with the Coupled cluster and the Green\'s function calculations. The first part deals with setting up the real and imaginary part of $T$-matrix in free space using a partial wave decomposition. You will need to define integration points and weights in momentum space and treat properly the poles which arise. With a working program, compute the relevant phase shifts. Extract also the scattering lengths for $s$ waves (orbital momentum $l=0$).'},
            {'aftertext': '\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Our next step consists in modifying the above program in order to include medium effects.\nRewrite the $T$-matrix program by introducing a so-called angle-average Pauli operator\nand corresponding energy denominators. This results in the so-called $G$-matrix.\nAllow for the inclusion of single-particle self-energy contributions in the $G$-matrix energy denominators. Compute both the real and imaginary parts of the $G$-matrix and set up the self-consistency problem and compute the ground state energy per particle in the thermodynamical limit.\n\nCompare your results with those obtained with Coupled Cluster theory\nand Green's function theory with a cartesian basis"},
            {'aftertext': '\n\n\n\n\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'In the final part of this project we are going to extend the formalism to finite temperature.\nUse the normalization condition of the density from the Fermi-Dirac momentum distribution \nto calculate the chemical potential in the medium. Compute thereafter the equation of state \nas function of temperature and discuss thermodynamical self-consistency requirements.'}],
  'text': '',
  'title': 'Brueckner-Hartree-Fock calculations for infinite nuclear and neutron matter',
  'type': 'Project',
  'type_visible': True}]