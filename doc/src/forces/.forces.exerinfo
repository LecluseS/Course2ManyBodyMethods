
# Information about all exercises in the file forces.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.forces.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'List all _allowed_ according to the Pauli principle partial waves with isospin $T$, their \nprojection $T_z$, spin $S$, orbital angular momentum $l$ and total spin $J$ for $J\\le 3$.\nUse the standard spectroscopic notation $^{2S+1}L_J$ to label different partial waves. A proton-proton state\nhas $T_Z=-1$, a proton-neutron state has $T_z=0$ and a neutron-neutron state has $T_z=1$.'}],
  'text': '',
  'title': 'List all partial waves up to a given orbital momentum',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 2,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Find the closed form expression for the spin-orbit force. Show that the spin-orbit force {\\bf LS} gives a zero contribution for $S$-waves (orbital angular momentum $l=0$).   What is the value of the spin-orbit force for spin-singlet states ($S=0$)?'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Find thereafter the expectation value of $\\mathbf{\\sigma}_1\\cdot\\mathbf{\\sigma}_2$, where $\\mathbf{\\sigma}_i$ are so-called Pauli matrices.'},
            {'aftertext': '\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Add thereafter isospin and find the expectation value of $\\mathbf{\\sigma}_1\\cdot\\mathbf{\\sigma}_2\\mathbf{\\tau}_1\\cdot\\mathbf{\\tau}_2$, where $\\mathbf{\\tau}_i$ are also so-called Pauli matrices. List all the cases with $S=0,1$ and $T=0,1$.'}],
  'text': '',
  'title': 'Expressions for various components',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 3,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Compute the expectation value of the tensor force and the spin-spin  and isospin operators for the one-pion exchange potential for all partial waves you found previously. Comment your results. How does the one-pion exchange part behave as function of different $l$, ${\\cal J}$ and $S$ values? Do you see some patterns?'},
            {'aftertext': '\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "For the binding energy of the deuteron, with the ground state defined by the quantum numbers $l=0$, $S=1$ and ${\\cal J}=1$, the tensor force plays an important role due to the admixture from the $l=2$ state. Use the expectation values of the different operators of the one-pion exchange potential and plot the ratio of the tensor force component over the spin-spin component of the one-pion exchange part as function of $x=m_\\pi r$ for the $l=2$ state (that is the case $l,l'={\\cal J}+1$). Comment your results."}],
  'text': "A simple parametrization of the nucleon-nucleon force is given by what is called the $V_8$ potential model,\nwhere we have kept eight different operators. These operators contain a central force, a spin-orbit force,\na spin-spin force and a tensor force. Several features of the nuclei can be explained in terms of these four components. Without the Pauli matrices for isospin the final form of such an interaction model results in the following form: \n!bt\n\\[\nV(\\mathbf{r})= \\left\\{ C_c + C_\\mathbf{\\sigma} \\mathbf{\\sigma}_1\\cdot\\mathbf{\\sigma}_2\n + C_T \\left( 1 + {3\\over m_\\alpha r} + {3\\over\\left(m_\\alpha r\\right)^2}\\right) S_{12} (\\hat r)\\right. \n\\]\n\n!et\n!bt\n\\[\n\\left. + C_{SL} \\left( {1\\over m_\\alpha r} + {1\\over \\left( m_\\alpha r\\right)^2}\n\\right) \\mathbf{L}\\cdot \\mathbf{S}\n\\right\\} \\frac{e^{-m_\\alpha r}}{m_\\alpha r}\n\\]\n\n!et\nwhere $m_{\\alpha}$ is the mass of the relevant meson and\n$S_{12}$ is the familiar tensor term. The various coefficients $C_i$ are normally fitted so that the potential reproduces experimental scattering cross sections. By adding terms which include the isospin Pauli matrices \nresults in an interaction model with eight operators.\n\nThe expectaction value of the tensor operator is non-zero only for $S=1$. We will show this in a forthcoming lecture, after that we have derived the Wigner-Eckart theorem. \nHere it suffices to know that the expectaction value of the tensor force for different partial values is  (with $l$ the orbital angular momentum and ${\\cal J}$ the total angular momentum in the relative and center-of-mass frame of motion)\n!bt\n\\[\n\\langle l {\\cal J}S=1| S_{12} | l' {\\cal J}S=1\\rangle = -\\frac{2{\\cal J}({\\cal J}+2)}{2{\\cal J}+1} \\hspace{0.5cm} l= {\\cal J}+1 \\hspace{0.1cm}\\mathrm{and} \\hspace{0.1cm} l'={\\cal J}+1,\n\\]\n\n!et\n!bt\n\\[\n\\langle l {\\cal J}S=1| S_{12} | l' {\\cal J}S=1\\rangle = \\frac{6\\sqrt{{\\cal J}({\\cal J}+1)}}{2{\\cal J}+1} \\hspace{0.5cm} l= {\\cal J}+1 \\hspace{0.1cm}\\mathrm{and} \\hspace{0.1cm} l'={\\cal J}-1,\n\\]\n\n!et\n!bt\n\\[\n\\langle l {\\cal J}S=1| S_{12} | l' {\\cal J}S=1\\rangle = \\frac{6\\sqrt{{\\cal J}({\\cal J}+1)}}{2{\\cal J}+1} \\hspace{0.5cm} l= {\\cal J}-1 \\hspace{0.1cm}\\mathrm{and} \\hspace{0.1cm} l'={\\cal J}+1,\n\\]\n\n!et\n!bt\n\\[\n\\langle l {\\cal J}S=1| S_{12} | l' {\\cal J}S=1\\rangle = -\\frac{2({\\cal J}-1)}{2{\\cal J}+1} \\hspace{0.5cm} l= {\\cal J}-1 \\hspace{0.1cm}\\mathrm{and} \\hspace{0.1cm} l'={\\cal J}-1,\n\\]\n\n!et\n!bt\n\\[\n\\langle l {\\cal J}S=1| S_{12} | l' {\\cal J}S=1\\rangle = 2 \\hspace{0.5cm} l= {\\cal J} \\hspace{0.1cm}\\mathrm{and} \\hspace{0.1cm} l'={\\cal J},\n\\]\n\n!et\nand zero else.   \n\nIn this exercise we will focus only on the one-pion exchange term of the nuclear force, namely\n!bt\n\\[\nV_{\\pi}(\\mathbf{r})= -\\frac{f_{\\pi}^{2}}{4\\pi m_{\\pi}^{2}}\\mathbf{ \\tau}_1\\cdot\\mathbf{\\tau}_2\n\\frac{1}{3}\\left\\{\\mathbf{ \\sigma}_1\\cdot\\mathbf{ \\sigma}_2+\\left( 1 + {3\\over m_\\pi r} + {3\\over\\left(m_\\pi r\\right)^2}\\right) S_{12} (\\hat r)\\right\\} \\frac{e^{-m_\\pi r}}{m_\\pi r}.\n\\]\n\n!et\nHere the constant $f_{\\pi}^{2}/4\\pi\\approx 0.08$ and the mass of the pion is $m_\\pi\\approx 140$ MeV/c${}^{2}$.",
  'title': 'Analysis of the opne-pion exchange component of the force',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 4,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Find an analytical expression for \nthe Fourier-Bessel transform (Hankel transform)\nto momentum space for $l=0$ using\n!bt\n\\[\n\\left\\langle k \\right | V_{l} \\left | k' \\right\\rangle\n= \\int j_l(kr)V(r)j_l(k'r)r^2dr.\n\\]\n\n!et"},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': "The following Fortran 95 program solves the above Lippmann-Schwinger equation. Python and C++ codes will be added later. Discussions of the results will also be added.  \n!bc fcod\nC     *******************************************************\nC         Example program used to evaluate the \nC         T-matrix following Kowalski's method (eqs V88 & V89\nC         in Brown and Jackson)  \nC         for positive energies only\nC         The program is set up for S-waves only\nC         Coded by : Morten Hjorth-Jensen\nC         Language : FORTRAN 90\nC     *******************************************************\n\n\n\nC               ******************************\nC                 Def of global variables\nC               ******************************\n\n\n      MODULE constants\n         DOUBLE PRECISION , PUBLIC :: p_mass, hbarc\n         PARAMETER (p_mass =938.926D0, hbarc = 197.327D0)\n      END MODULE constants\n\n      MODULE mesh_variables           \n         INTEGER, PUBLIC :: n_rel\n         PARAMETER(n_rel=48)\n         DOUBLE PRECISION, ALLOCATABLE, PUBLIC :: ra(:), wra(:)\n      END MODULE  mesh_variables\n\n\nC               ******************************\nC                   Begin of main program\nC               ******************************\n\n\n      PROGRAM t_matrix\n      USE mesh_variables\n      IMPLICIT NONE\n      INTEGER istat\n\n      ALLOCATE( ra (n_rel), wra (n_rel),  STAT=istat )\n      CALL rel_mesh               ! rel mesh & weights\n      CALL t_channel              ! calculate the T-matrix\n      DEALLOCATE( ra,wra, STAT=istat )\n\n      END PROGRAM t_matrix\n\nC     *********************************************************\nC                    obtain the t-mtx\nC                    vkk is the box potential\nC                    f_mtx is equation V88 og Brown & Jackson\nC     *********************************************************\n\n      SUBROUTINE t_channel\n      USE mesh_variables\n      IMPLICIT NONE\n      INTEGER istat, i,j\n      DIMENSION vkk(:,:),f_mtx(:),t_mtx(:)\n      DOUBLE PRECISION, ALLOCATABLE :: vkk,t_mtx,f_mtx\n      DOUBLE PRECISION t_shell\n\n      ALLOCATE(vkk (n_rel,n_rel), STAT=istat)\n      CALL v_pot_yukawa(vkk) ! set up the box potential in routine vpot\n      ALLOCATE(t_mtx (n_rel), STAT=istat) ! allocate space in heap for T\n      ALLOCATE(f_mtx (n_rel), STAT=istat) ! allocate space for f\n      DO i=1,n_rel               ! loop over positive energies e=k^2\n         CALL f_mtx_eq(f_mtx,vkk,i)  ! solve eq. V88\n         CALL principal_value(vkk,f_mtx,i,t_shell) ! solve Eq. V89 \n         DO j=1,n_rel    ! the t-matrix\n            t_mtx(j)=f_mtx(j)*t_shell\n            IF(j == i) WRITE(6,*) ra(i) ,t_mtx(i)\nc     &                            DATAN(-ra(i)*t_mtx(i))\n         ENDDO\n      ENDDO\n      DEALLOCATE(vkk ,  STAT=istat)\n      DEALLOCATE(t_mtx, f_mtx,  STAT=istat)\n 1000 FORMAT( I3, 2F12.6) \n\n      END SUBROUTINE t_channel\n\nC     ***********************************************************\nC          The analytical expression for the box potential\nC          of exercise 1 and 12\nC          vkk is in units of fm^-2 (14 MeV/41.47Mevfm^2, where \nC          41.47= \\hbarc^2/mass_nucleon),  \nC          ra are mesh points in rel coordinates, units of fm^-1\nC     ***********************************************************\n\n      SUBROUTINE v_pot_box(vkk)\n      USE mesh_variables\n      USE constants\n      IMPLICIT NONE\n      INTEGER i,j\n      DOUBLE PRECISION  vkk, r_0, v_0, a, b, fac\n      PARAMETER(r_0=2.7d0,v_0=0.33759d0)  !r_0 in fm, v_0 in fm^-2 \n      DIMENSION vkk(n_rel,n_rel)\n\n      DO i=1,n_rel     ! set up the free potential\n         DO j=1,i-1 \n            a=ra(i)+ra(j)\n            b=ra(i)-ra(j)\n            fac=v_0/(2.d0*ra(i)*ra(j))\n            vkk(j,i)=fac*(DSIN(a*r_0)/a-DSIN(b*r_0)/b)\n            vkk(i,j)=vkk(j,i)\n         ENDDO\n         fac=v_0/(2.d0*(ra(i)**2))\n         vkk(i,i)=fac*(DSIN(2.d0*ra(i)*r_0)/(2.d0*ra(i))-r_0)\n      ENDDO\n\n      END  SUBROUTINE v_pot_box\n\nC     ***********************************************************\nC          The analytical expression for  a Yukawa potential\nC          in the l=0 channel\nC          vkk is in units of fm^-2,  \nC          ra are mesh points in rel coordinates, units of fm^-1\nC          The parameters here are those of the Reid-Soft core\nC          potential, see Brown and Jackson eq. A(4)\nC     ***********************************************************\n\n      SUBROUTINE v_pot_yukawa(vkk)\n      USE mesh_variables\n      USE constants\n      IMPLICIT NONE\n      INTEGER i,j\n      DOUBLE PRECISION  vkk, mu1, mu2, mu3, v_1, v_2, v_3, a, b, fac\n      PARAMETER(mu1=0.49d0,v_1=-0.252d0) \n      PARAMETER(mu2=7.84d0,v_2=-39.802d0) \n      PARAMETER(mu3=24.01d0,v_3=156.359d0) \n      DIMENSION vkk(n_rel,n_rel)\n\n      DO i=1,n_rel     ! set up the free potential\n         DO j=1,i \n            a=(ra(j)+ra(i))**2\n            b=(ra(j)-ra(i))**2\n            fac=1./(4.d0*ra(i)*ra(j))\n            vkk(j,i)=v_1*fac*DLOG((a+mu1)/(b+mu1))+\n     &               v_2*fac*DLOG((a+mu2)/(b+mu2))+\n     &               v_3*fac*DLOG((a+mu3)/(b+mu3))\n            vkk(i,j)=vkk(j,i)\n         ENDDO\n      ENDDO\n\n      END  SUBROUTINE v_pot_yukawa\n      \nC     **************************************************\nC         Solves eq. V88 \nC         and returns < p | f_mtx | n_pole =k>\nC     **************************************************\n\n      SUBROUTINE f_mtx_eq(f_mtx,vkk,n_pole)\n      USE mesh_variables\n      USE constants\n      IMPLICIT NONE\n      INTEGER i, j, int, istat, n_pole\n      DOUBLE PRECISION f_mtx,vkk,dp,deriv,pih,xsum\n      DIMENSION dp(1),deriv(1)\n      DIMENSION f_mtx(n_rel),vkk(n_rel,n_rel),a(:,:),fu(:),q(:),au(:)\n      DOUBLE PRECISION, ALLOCATABLE :: fu, q, au, a\n\n      pih=2.D0/ACOS(-1.D0)\n      ALLOCATE( a (n_rel,n_rel), STAT=istat)\n      DO i=1,n_rel\n         ALLOCATE(fu(n_rel), q(n_rel), au(n_rel), STAT=istat)\n         DO j=1,n_rel\n            fu(j)=vkk(i,j)-vkk(i,n_pole)*vkk(n_pole,j)/\n     &                 vkk(n_pole,n_pole)\n         ENDDO\n         DO j=1,n_rel\n            IF(j /= n_pole ) THEN     ! regular part\n               a(j,i)=pih*fu(j)*wra(j)*(ra(j)**2)/\n     &                (ra(j)**2-ra(n_pole)**2)\n            ELSEIF(j == n_pole) THEN  ! use l'Hopitals rule to get pole term\n               dp(1)=ra(j)             \n               CALL spls3(ra,fu,n_rel,dp,deriv(1),1,q,au,2,0) \n               a(j,i)=pih*wra(j)*ra(j)/2.d0*deriv(1)\n            ENDIF\n         ENDDO\n         DEALLOCATE(fu, q, au, STAT=istat)   ! free space in heap \n         a(i,i)=a(i,i)+1.D0\n      ENDDO\n      CALL matinv(a, n_rel)      ! Invert the matrix a\n      DO j=1,n_rel               ! multiply inverted matrix a with dim less pot\n         xsum=0.D0\n         DO i=1,n_rel\n            xsum=xsum+a(i,j)*vkk(i,n_pole)/vkk(n_pole,n_pole)  ! gives f-matrix in V88\n         ENDDO\n         f_mtx(j)=xsum\n      ENDDO\n      DEALLOCATE (a, STAT=istat)\n\n      END SUBROUTINE f_mtx_eq\n\nC     **************************************************\nC         Solves the principal value integral of V89\nC         returns the t-matrix for k=k, t_shell\nC     **************************************************\n\n      SUBROUTINE principal_value(vkk,f_mtx,n_pole,t_shell) \n      USE mesh_variables\n      IMPLICIT NONE\n      DOUBLE PRECISION vkk, f_mtx, t_shell, sum, pih, deriv, term\n      DIMENSION deriv(1)\n      DIMENSION vkk(n_rel, n_rel), f_mtx(n_rel),fu(:), q(:), au(:)\n      DOUBLE PRECISION, ALLOCATABLE :: fu, q, au\n      INTEGER n_pole, i, istat\n\n      ALLOCATE(fu(n_rel), q(n_rel), au(n_rel), STAT=istat)\n      sum=0.D0\n      pih=2.D0/ACOS(-1.D0)\n      DO i=1,n_rel\n         fu(i)=vkk(n_pole,i)*f_mtx(i)\n      ENDDO\n      DO i=1,n_pole-1  ! integrate up to the pole - 1 mesh\n         term=fu(i)*(ra(i)**2)-fu(n_pole)*(ra(n_pole)**2)\n         sum=sum+pih*wra(i)*term/(ra(i)**2-ra(n_pole)**2)\n      ENDDO       ! here comes the pole part\n      CALL spls3(ra,fu,n_rel,ra(n_pole),deriv,1,au,q,2,0)      \n      sum=sum+pih*wra(n_pole)*(fu(n_pole)+ra(n_pole)*deriv(1)/2.d0) \n      DO i=n_pole+1,n_rel  ! integrate from pole + 1mesh pt to infty\n         term=fu(i)*(ra(i)**2)-fu(n_pole)*(ra(n_pole)**2)\n         sum=sum+pih*wra(i)*term/(ra(i)**2-ra(n_pole)**2)\n      ENDDO\n      t_shell=vkk(n_pole,n_pole)/(1.d0+sum)\n      DEALLOCATE (fu, q, au, STAT=istat)\n\n      END SUBROUTINE principal_value\n\nC         ***********************************************\nC             Set up of relative mesh and weights\nC         ***********************************************\n\n      SUBROUTINE rel_mesh\n      USE mesh_variables\n      IMPLICIT NONE\n      INTEGER i\n      DOUBLE PRECISION pih,u,s,xx,c,h_max\n      PARAMETER (c=0.75)\n      DIMENSION u(n_rel), s(n_rel)\n\n      pih=ACOS(-1.D0)/2.D0\n      CALL gausslegendret (0.D0,1.d0,n_rel,u,s)\n      DO i=1,n_rel\n         xx=pih*u(i)\n         ra(i)=DTAN(xx)*c\n         wra(i)=pih*c/DCOS(xx)**2*s(i)\n      ENDDO\n\n      END SUBROUTINE rel_mesh\n\nC     *********************************************************\nC            Routines to do mtx inversion, from Numerical\nC            Recepies, Teukolsky et al. Routines included\nC            below are MATINV, LUDCMP and LUBKSB. See chap 2\nC            of Numerical Recepies for further details\nC            Recoded in FORTRAN 90 by M. Hjorth-Jensen\nC     *********************************************************\n\n      SUBROUTINE matinv(a,n)\n      IMPLICIT REAL*8(A-H,O-Z)\n      DIMENSION a(n,n)\n      INTEGER istat\n      DOUBLE PRECISION, ALLOCATABLE :: y(:,:)\n      INTEGER, ALLOCATABLE :: indx(:)\n\n      ALLOCATE (y( n, n), STAT =istat)\n      ALLOCATE ( indx (n), STAT =istat)\n      DO i=1,n\n         DO j=1,n\n            y(i,j)=0.\n         ENDDO\n         y(i,i)=1.\n      ENDDO\n      CALL  ludcmp(a,n,indx,d)\n      DO j=1,n\n         call lubksb(a,n,indx,y(1,j))\n      ENDDO\n      DO i=1,n\n         DO j=1,n\n            a(i,j)=y(i,j)\n         ENDDO\n      ENDDO\n      DEALLOCATE ( y, STAT=istat)\n      DEALLOCATE ( indx, STAT=istat)\n\n      END SUBROUTINE matinv\n \n\n      SUBROUTINE LUDCMP(A,N,INDX,D)\n      IMPLICIT REAL*8(A-H,O-Z)\n      PARAMETER (TINY=1.0E-20)\n      DIMENSION A(N,N),INDX(N)\n      INTEGER istat\n      DOUBLE PRECISION, ALLOCATABLE :: vv(:)\n\n      ALLOCATE ( vv(n), STAT = istat)\n      D=1.\n      DO I=1,N\n         AAMAX=0.\n         DO J=1,N\n            IF (ABS(A(I,J)) > AAMAX) AAMAX=ABS(A(I,J))\n         ENDDO\n         IF (AAMAX == 0.) PAUSE 'Singular matrix.'\n         VV(I)=1./AAMAX\n      ENDDO\n      DO J=1,N\n         IF (J > 1) THEN\n            DO I=1,J-1\n               SUM=A(I,J)\n               IF (I > 1)THEN\n                  DO K=1,I-1\n                     SUM=SUM-A(I,K)*A(K,J)\n                  ENDDO\n                  A(I,J)=SUM\n               ENDIF\n            ENDDO\n         ENDIF\n         AAMAX=0.\n         DO I=J,N\n            SUM=A(I,J)\n            IF (J > 1)THEN\n               DO K=1,J-1\n                  SUM=SUM-A(I,K)*A(K,J)\n               ENDDO\n               A(I,J)=SUM\n            ENDIF\n            DUM=VV(I)*ABS(SUM)\n            IF (DUM >= AAMAX) THEN\n               IMAX=I\n               AAMAX=DUM\n            ENDIF\n         ENDDO\n         IF (J /= IMAX)THEN\n            DO K=1,N\n               DUM=A(IMAX,K)\n               A(IMAX,K)=A(J,K)\n               A(J,K)=DUM\n            ENDDO\n            D=-D\n            VV(IMAX)=VV(J)\n         ENDIF\n         INDX(J)=IMAX\n         IF(J /= N)THEN\n            IF(A(J,J) == 0.) A(J,J)=TINY\n            DUM=1./A(J,J)\n            DO I=J+1,N\n               A(I,J)=A(I,J)*DUM\n            ENDDO\n         ENDIF\n      ENDDO\n      IF(A(N,N) == 0.)  A(N,N)=TINY\n      DEALLOCATE ( vv, STAT = istat)\n\n      END SUBROUTINE LUDCMP\n \n      SUBROUTINE LUBKSB(A,N,INDX,B)\n      implicit real*8(a-h,o-z)\n      DIMENSION A(N,N),INDX(N),B(N)\n      II=0\n      DO I=1,N\n         LL=INDX(I)\n         SUM=B(LL)\n         B(LL)=B(I)\n         IF (II /= 0)THEN\n            DO J=II,I-1\n               SUM=SUM-A(I,J)*B(J)\n            ENDDO\n         ELSE IF (SUM /= 0.) THEN\n            II=I\n         ENDIF\n         B(I)=SUM\n      ENDDO\n      DO I=N,1,-1\n         SUM=B(I)\n         IF (I < N)THEN\n            DO J=I+1,N\n               SUM=SUM-A(I,J)*B(J)\n            ENDDO\n         ENDIF\n         B(I)=SUM/A(I,I)\n      ENDDO\n\n      END SUBROUTINE lubksb\n\n!ec",
             'text': 'Write a small program which calculates the latter expression\nand use this potential to compute the $T$-matrix at positive energies\nfor $l=0$.\nCompare your results to those obtained with a  box potential given by\n!bt\n\\[\nV(r)=\\left\\{ \\begin{array}{cc} -V_0& r < R_0 \\\\\n                                0  & r > R_0 \\end{array} \\right.\n\\]\n\n!et\nMake a plot of the\ntwo $T$-matrices for energies up to 300 MeV in the lab frame\nand comment your results.\n\nFinally, a warning, the above central potential is fitted  \nto data from approximately \n20 MeV to some 300 MeV. This means that results outside\nthe data set should be taken seriously.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'The parameters of the box potential are chosen to fit a\npotential with a bound state at zero energy. What does this mean\nfor your $T$-matrix with this potential when\n$k\\rightarrow 0$?'}],
  'text': 'The aim here is to develop a program which solves the Lippman-Schwinger equation for a simple parametrization for the \n$^1S_0$ partial wave. This partial wave is given by a central force only and is parametrized in coordinate space as\n!bt\n\\[\n  V(r)=V_a \\frac{e^{-ax}}{x}+V_b \\frac{e^{-bx}}{x}+V_c \\frac{e^{-cx}}{x}\n\\]\n\n!et\nwith $x=\\mu r$, $\\mu=0.7$ fm (the inverse of the pion mass),\n$V_a=-10.463$ MeV and $a=1$, $V_b=-1650.6$ MeV and $b=4$ and\n$V_c=6484.3$ MeV and $c=7$.',
  'title': 'Program for the Lippman-Schwinger equation',
  'type': 'Exercise',
  'type_visible': True}]